/**
 * Recovery Plan Service
 *
 * Generates comprehensive jet lag recovery plans with:
 * - Light therapy schedules
 * - Sleep/wake schedules
 * - Meal timing recommendations
 * - Activity suggestions
 * - Supplement schedules
 */

import { generatePersonalizedRecoveryPlan, type RecoveryRecommendation } from '@/lib/ai';
import { calculateJetlagScore, type JetlagFactors } from '@/lib/services/jetlagCalculator';
import { addHours, format, parseISO } from 'date-fns';
import { utcToZonedTime, zonedTimeToUtc } from 'date-fns-tz';

export interface RecoveryPlanInput {
  // Flight details
  originTimezone: string;
  destinationTimezone: string;
  departureTime: Date;
  arrivalTime: Date;
  flightDuration: number; // minutes

  // User preferences
  userId?: string;
  sleepQuality?: string;
  adaptabilityLevel?: string;
  ageRange?: string;
  exerciseFrequency?: string;
  caffeineConsumption?: string;
  melatoninUse?: boolean;
  lightTherapyAccess?: boolean;
  bedtime?: string;
  wakeTime?: string;
}

export interface RecoveryPlanOutput {
  flightId?: string;
  jetlagScore: number;
  estimatedRecoveryDays: number;
  aiGeneratedPlan?: RecoveryRecommendation;
  quickTips: string[];
  detailedSchedule: RecoveryScheduleDay[];
  createdAt: Date;
}

export interface RecoveryScheduleDay {
  day: number; // 0 = arrival day, 1 = day after arrival, etc.
  date: string; // YYYY-MM-DD
  timezone: string;
  activities: RecoveryActivity[];
}

export interface RecoveryActivity {
  time: string; // HH:MM format
  type: 'sleep' | 'light' | 'meal' | 'exercise' | 'supplement' | 'avoid';
  title: string;
  description: string;
  priority: 'high' | 'medium' | 'low';
  duration?: number; // minutes
}

/**
 * Generate a comprehensive recovery plan
 */
export async function generateRecoveryPlan(
  input: RecoveryPlanInput,
  useAI: boolean = true
): Promise<RecoveryPlanOutput> {
  // Calculate basic jetlag metrics
  const timezoneShift = calculateTimezoneShift(input.originTimezone, input.destinationTimezone);
  const direction = timezoneShift > 0 ? 'eastbound' : 'westbound';

  const jetlagFactors: JetlagFactors = {
    timezoneShift: Math.abs(timezoneShift),
    direction: Math.abs(timezoneShift) < 1 ? 'neutral' : direction,
    crossesDateline: crossesDateLine(input.originTimezone, input.destinationTimezone),
    departureTime: format(input.departureTime, 'HH:mm'),
    arrivalTime: format(input.arrivalTime, 'HH:mm'),
    flightDuration: input.flightDuration,
    aircraftScore: 7.0, // Default, should be passed in
    airlineScore: 7.0,
    originAirportScore: 7.0,
    destAirportScore: 7.0,
  };

  const jetlagResult = calculateJetlagScore(jetlagFactors);

  // Generate AI-powered plan if requested
  let aiPlan: RecoveryRecommendation | undefined;
  if (useAI) {
    try {
      aiPlan = await generatePersonalizedRecoveryPlan(
        {
          originTimezone: input.originTimezone,
          destinationTimezone: input.destinationTimezone,
          departureTime: input.departureTime,
          arrivalTime: input.arrivalTime,
          timezonesDiff: timezoneShift,
          direction,
        },
        {
          sleepQuality: input.sleepQuality,
          adaptabilityLevel: input.adaptabilityLevel,
          ageRange: input.ageRange,
          exerciseFrequency: input.exerciseFrequency,
          caffeineConsumption: input.caffeineConsumption,
          melatoninUse: input.melatoninUse,
          lightTherapyAccess: input.lightTherapyAccess,
          bedtime: input.bedtime,
          wakeTime: input.wakeTime,
        }
      );
    } catch (error) {
      console.error('Failed to generate AI plan:', error);
      // Continue with rule-based plan
    }
  }

  // Generate rule-based schedule
  const detailedSchedule = generateRecoverySchedule(
    input,
    timezoneShift,
    jetlagResult.recoveryDays
  );

  // Generate quick tips
  const quickTips = generateQuickTips(jetlagFactors, jetlagResult);

  return {
    jetlagScore: jetlagResult.score,
    estimatedRecoveryDays: jetlagResult.recoveryDays,
    aiGeneratedPlan: aiPlan,
    quickTips,
    detailedSchedule,
    createdAt: new Date(),
  };
}

/**
 * Calculate timezone shift in hours
 */
function calculateTimezoneShift(originTz: string, destTz: string): number {
  // Simplified calculation - in production, use proper timezone libraries
  // This is a placeholder
  const now = new Date();
  const originDate = utcToZonedTime(now, originTz);
  const destDate = utcToZonedTime(now, destTz);

  const originOffset = originDate.getTimezoneOffset();
  const destOffset = destDate.getTimezoneOffset();

  return (originOffset - destOffset) / 60;
}

/**
 * Check if route crosses International Date Line
 */
function crossesDateLine(originTz: string, destTz: string): boolean {
  // Simplified check - enhance in production
  return originTz.includes('Pacific') && destTz.includes('Asia');
}

/**
 * Generate day-by-day recovery schedule
 */
function generateRecoverySchedule(
  input: RecoveryPlanInput,
  timezoneShift: number,
  recoveryDays: number
): RecoveryScheduleDay[] {
  const schedule: RecoveryScheduleDay[] = [];
  const absShift = Math.abs(timezoneShift);
  const isEastbound = timezoneShift > 0;

  // Generate schedule for recovery period (up to 7 days)
  const daysToGenerate = Math.min(Math.ceil(recoveryDays) + 1, 7);

  for (let day = 0; day < daysToGenerate; day++) {
    const currentDate = addHours(input.arrivalTime, day * 24);
    const activities: RecoveryActivity[] = [];

    // Day-specific recommendations
    if (day === 0) {
      // Arrival day
      activities.push({
        time: format(input.arrivalTime, 'HH:mm'),
        type: 'light',
        title: 'Get natural sunlight',
        description: 'Expose yourself to bright natural light for 30-60 minutes upon arrival',
        priority: 'high',
        duration: 45,
      });

      activities.push({
        time: format(addHours(input.arrivalTime, 2), 'HH:mm'),
        type: 'meal',
        title: 'Eat a light meal at local time',
        description: 'Synchronize your eating schedule with local time zone',
        priority: 'high',
      });

      activities.push({
        time: '22:00',
        type: 'sleep',
        title: 'Sleep at local bedtime',
        description: 'Go to bed at a normal local bedtime, even if not tired',
        priority: 'high',
        duration: 480, // 8 hours
      });

      if (input.melatoninUse) {
        activities.push({
          time: '21:30',
          type: 'supplement',
          title: 'Take melatonin',
          description: '0.5-3mg melatonin 30 minutes before bed',
          priority: 'medium',
        });
      }
    } else {
      // Subsequent days
      const shiftPerDay = absShift / recoveryDays;
      const targetBedtime = isEastbound
        ? calculateEarlierBedtime(input.bedtime || '22:00', shiftPerDay * day)
        : calculateLaterBedtime(input.bedtime || '22:00', shiftPerDay * day);

      activities.push({
        time: '07:00',
        type: 'light',
        title: isEastbound ? 'Morning light exposure' : 'Delay morning light',
        description: isEastbound
          ? 'Get bright light in the morning to advance your clock'
          : 'Avoid bright light in early morning, get it later in the day',
        priority: 'high',
        duration: 30,
      });

      activities.push({
        time: '12:00',
        type: 'meal',
        title: 'Lunch at local time',
        description: 'Eat meals at regular local times to reinforce circadian rhythm',
        priority: 'medium',
      });

      activities.push({
        time: '17:00',
        type: 'exercise',
        title: 'Moderate exercise',
        description: 'Light exercise helps regulate sleep-wake cycle',
        priority: 'medium',
        duration: 30,
      });

      activities.push({
        time: targetBedtime,
        type: 'sleep',
        title: 'Adjusted bedtime',
        description: `Gradually shift bedtime ${isEastbound ? 'earlier' : 'later'}`,
        priority: 'high',
        duration: 480,
      });

      activities.push({
        time: '15:00',
        type: 'avoid',
        title: 'Avoid caffeine after 3 PM',
        description: 'No caffeine in afternoon to ensure good sleep',
        priority: 'medium',
      });
    }

    schedule.push({
      day,
      date: format(currentDate, 'yyyy-MM-dd'),
      timezone: input.destinationTimezone,
      activities: activities.sort((a, b) => a.time.localeCompare(b.time)),
    });
  }

  return schedule;
}

/**
 * Calculate earlier bedtime (for eastbound)
 */
function calculateEarlierBedtime(currentBedtime: string, hoursEarlier: number): string {
  const [hours, minutes] = currentBedtime.split(':').map(Number);
  const totalMinutes = hours * 60 + minutes - Math.floor(hoursEarlier * 60);
  const newHours = Math.floor(totalMinutes / 60) % 24;
  const newMinutes = totalMinutes % 60;
  return `${String(newHours).padStart(2, '0')}:${String(newMinutes).padStart(2, '0')}`;
}

/**
 * Calculate later bedtime (for westbound)
 */
function calculateLaterBedtime(currentBedtime: string, hoursLater: number): string {
  const [hours, minutes] = currentBedtime.split(':').map(Number);
  const totalMinutes = hours * 60 + minutes + Math.floor(hoursLater * 60);
  const newHours = Math.floor(totalMinutes / 60) % 24;
  const newMinutes = totalMinutes % 60;
  return `${String(newHours).padStart(2, '0')}:${String(newMinutes).padStart(2, '0')}`;
}

/**
 * Generate quick actionable tips
 */
function generateQuickTips(
  factors: JetlagFactors,
  jetlagResult: { score: number; recoveryDays: number; breakdown: any }
): string[] {
  const tips: string[] = [];

  // Direction-specific tips
  if (factors.direction === 'eastbound') {
    tips.push('ð Eastbound travel: Start shifting your sleep 1 hour earlier 3 days before departure');
    tips.push('  Seek morning light at destination to advance your body clock');
  } else if (factors.direction === 'westbound') {
    tips.push('ð Westbound travel: Easier to adjust! Your body naturally prefers this direction');
    tips.push('< Get afternoon/evening light at destination to delay your body clock');
  }

  // Timezone shift magnitude
  if (Math.abs(factors.timezoneShift) > 8) {
    tips.push('< Large timezone shift: Consider a strategic stopover to break up the adjustment');
  } else if (Math.abs(factors.timezoneShift) < 3) {
    tips.push(' Small timezone shift: You should adjust within 1-2 days');
  }

  // Arrival time optimization
  const arrivalHour = parseInt(factors.arrivalTime.split(':')[0]);
  if (arrivalHour >= 18 || arrivalHour <= 6) {
    tips.push('< Night arrival: Stay awake until local bedtime to speed adjustment');
  } else {
    tips.push('  Daytime arrival: Perfect! Use sunlight exposure to reset your clock');
  }

  // Score-based tips
  if (jetlagResult.score >= 8) {
    tips.push('<¯ Excellent flight choice for minimizing jet lag!');
  } else if (jetlagResult.score < 5) {
    tips.push('  This flight will cause significant jet lag - plan extra recovery time');
  }

  // General tips
  tips.push('=§ Hydrate well before, during, and after the flight');
  tips.push('<} Eat meals at destination time zone as soon as possible');

  return tips.slice(0, 8); // Return top 8 tips
}

/**
 * Update an existing recovery plan (for user modifications)
 */
export async function updateRecoveryPlan(
  existingPlan: RecoveryPlanOutput,
  updates: Partial<RecoveryPlanInput>
): Promise<RecoveryPlanOutput> {
  // Regenerate plan with updated inputs
  // This is a placeholder - implement full update logic
  return existingPlan;
}

/**
 * Export recovery plan to calendar format (iCal)
 */
export function exportToCalendar(plan: RecoveryPlanOutput): string {
  // This would generate an iCal file
  // For now, return a placeholder
  return 'BEGIN:VCALENDAR\nVERSION:2.0\nPRODID:-//NoJetlag//Recovery Plan//EN\nEND:VCALENDAR';
}
